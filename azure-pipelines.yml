# azure-pipelines-infra.yml
trigger: none

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: AzureCLI@2
  displayName: 'Install Terraform & Run "terraform init/plan/apply"'
  inputs:
    azureSubscription: 'MyAzureServiceConnection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Install or update Terraform
      curl -sSL https://aka.ms/InstallAzureCLIDeb | sudo bash
      sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
      curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
      sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main"
      sudo apt-get update && sudo apt-get install terraform -y

      # Run Terraform commands
      terraform init
      terraform plan -out=tfplan \
        -var="db_admin_password=$(DB_ADMIN_PASSWORD)" \
        -var="pname=$(pname)" \
        -var="org_url=$(url)" \
        -var="pat=$(pat)" \
        -var="azure_subscription_id=$(sub_id)"
      terraform apply -auto-approve tfplan

      # Export Terraform outputs to a JSON file
      terraform output -json > ../tf-outputs.json
  env:
    DB_ADMIN_PASSWORD: $(DB_ADMIN_PASSWORD)
    url: $(url) 
    pat: $(pat)
    pname: $(pname) 
    sub_id: $(sub_id)

- script: |
    # Install jq for parsing JSON outputs
    sudo apt-get update && sudo apt-get install -y jq

    # Parse Terraform outputs and set them as pipeline variables
    export DB_HOST=$(jq -r '.db_host.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=DB_HOST]$DB_HOST"

    export DB_USER=$(jq -r '.db_user.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=DB_USER]$DB_USER"

    export DB_PASSWORD=$(jq -r '.db_password.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=DB_PASSWORD]$DB_PASSWORD"

    export DB_NAME=$(jq -r '.db_name.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=DB_NAME]$DB_NAME"

    # Capture backend API URL and frontend app name
    export BACKEND_API_URL=$(jq -r '.backend_app_url.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=BACKEND_API_URL]$BACKEND_API_URL"

    export FRONTEND_APP_NAME=$(jq -r '.frontend_app_name.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=FRONTEND_APP_NAME]$FRONTEND_APP_NAME"

    # Export backend app name
    export BACKEND_APP_NAME=$(jq -r '.backend_app_name.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=BACKEND_APP_NAME]$BACKEND_APP_NAME"
  displayName: 'Extract Terraform Outputs & Set Pipeline Variables'

- task: AzureWebApp@1
  displayName: 'Configure Backend App Environment Variables'
  inputs:
    azureSubscription: 'MyAzureServiceConnection'
    appName: $(BACKEND_APP_NAME)
    appType: webApp  # Specifies the type of app
    appSettings: |
      DB_HOST=$(DB_HOST)
      DB_PORT=5432
      DB_USER=$(DB_USER)
      DB_PASSWORD=$(DB_PASSWORD)
      DB_NAME=$(DB_NAME)

- task: AzureWebApp@1
  displayName: 'Configure Frontend App Environment Variables'
  inputs:
    azureSubscription: 'MyAzureServiceConnection'
    appName: $(FRONTEND_APP_NAME)
    appType: webApp  # Specifies the type of app
    appSettings: |
      REACT_APP_API_URL=$(BACKEND_API_URL)
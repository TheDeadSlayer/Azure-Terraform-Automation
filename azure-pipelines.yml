trigger: none

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: AzureCLI@2
  displayName: 'Run Terraform to Generate tf-outputs.json'
  inputs:
    azureSubscription: 'MyAzureServiceConnection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Install Terraform (if not already installed)
      curl -sSL https://aka.ms/InstallAzureCLIDeb | sudo bash
      sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
      curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
      sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main"
      sudo apt-get update && sudo apt-get install terraform -y

      # Initialize and apply Terraform
      terraform init
      terraform plan -out=tfplan \
        -var="db_admin_password=$(DB_ADMIN_PASSWORD)" \
        -var="pname=$(pname)" \
        -var="org_url=$(url)" \
        -var="pat=$(pat)" \
        -var="azure_subscription_id=$(sub_id)"
      terraform apply -auto-approve tfplan

      # Generate tf-outputs.json
      terraform output -json > tf-outputs.json

      # Confirm the file exists
      if [ ! -f tf-outputs.json ]; then
        echo "Error: tf-outputs.json was not created."
        exit 1
      else
        echo "tf-outputs.json created successfully."
      fi
  env:
    DB_ADMIN_PASSWORD: $(DB_ADMIN_PASSWORD)
    url: $(url)
    pat: $(pat)
    pname: $(pname)
    sub_id: $(sub_id)

- script: |
    # Install jq for parsing JSON outputs
    sudo apt-get update && sudo apt-get install -y jq

    # Ensure the tf-outputs.json exists
    if [ ! -f tf-outputs.json ]; then
      echo "Error: tf-outputs.json file not found!"
      exit 1
    fi

    # Parse Terraform outputs and set them as variables
    export DB_HOST=$(jq -r '.db_host.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=DB_HOST]$DB_HOST"

    export DB_USER=$(jq -r '.db_user.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=DB_USER]$DB_USER"

    export DB_PASSWORD=$(jq -r '.db_password.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=DB_PASSWORD]$DB_PASSWORD"

    export DB_NAME=$(jq -r '.db_name.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=DB_NAME]$DB_NAME"

    export BACKEND_API_URL=$(jq -r '.backend_app_url.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=BACKEND_API_URL]$BACKEND_API_URL"

    export BACKEND_APP_NAME=$(jq -r '.backend_app_name.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=BACKEND_APP_NAME]$BACKEND_APP_NAME"

    export FRONTEND_APP_NAME=$(jq -r '.frontend_app_name.value' tf-outputs.json)
    echo "##vso[task.setvariable variable=FRONTEND_APP_NAME]$FRONTEND_APP_NAME"

    # Configure backend app environment variables
    az webapp config appsettings set --resource-group $(pname) --name $BACKEND_APP_NAME --settings \
      DB_HOST=$DB_HOST \
      DB_PORT=5432 \
      DB_USER=$DB_USER \
      DB_PASSWORD=$DB_PASSWORD \
      DB_NAME=$DB_NAME

    # Configure frontend app environment variables
    az webapp config appsettings set --resource-group $(pname) --name $FRONTEND_APP_NAME --settings \
      REACT_APP_API_URL=$BACKEND_API_URL
  displayName: 'Set Environment Variables for Web Apps'